{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acost\\\\Desktop\\\\in-progress\\\\stellar\\\\stellar-wallet\\\\src\\\\Components\\\\BuildTransaction\\\\Transaction\\\\TransactionFormComponent.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TransactionFormComponent = props => {\n  _s();\n\n  const [sourceAccount, setSourceAccount] = useState('');\n  const [onlyNumsTemp, setOnlyNumsTemp] = useState('');\n  const [transactionSequenceNumber, setTransactionSequenceNumber] = useState('');\n  const [baseFee, setBaseFee] = useState(100);\n  const [memo, setMemo] = useState('');\n  const [timeBounds, setTimeBounds] = useState(0); // functions to filter inputs\n\n  const replaceSpecialCharacters = input => input.replace(/[~`!@#$%^&*()+={}\\[\\];:\\'\\\"<>.,\\/\\\\\\?_-]/g, ''); // replace all special characters\n\n\n  const onlyNumbers = input => input.replace(/[\\D]/g, ''); // replace all non-digits\n\n\n  const onlyIntegers = input => Number.isNaN(parseInt(input)) ? 0 : parseInt(input); // return integer, or 0 if NaN\n  // handle all number inputs\n\n\n  const handleNumberInputChange = e => {\n    // store element data\n    let inputName = e.target.name;\n    let inputVariable = onlyNumbers(replaceSpecialCharacters(e.target.value)); // set appropriate state variables to input value\n\n    if (inputName === \"transaction-sequence-number\") setTransactionSequenceNumber(inputVariable);else if (inputName === \"base-fee\") setBaseFee(onlyIntegers(inputVariable));else if (inputName === \"time-bounds\") setTimeBounds(onlyIntegers(inputVariable));\n  }; // handle source account input\n\n\n  const handleSourceAccountChange = e => setSourceAccount(replaceSpecialCharacters(e.target.value).toUpperCase());\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"TransactionFormComponent.jsx\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"X X-fd-column\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"source-account\",\n        children: \"Source Account: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"source-account\",\n        onChange: handleSourceAccountChange,\n        value: sourceAccount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"X X-fd-column\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"transaction-sequence-number\",\n        children: \"Transaction Sequence Number: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"transaction-sequence-number\",\n        onChange: handleNumberInputChange,\n        value: transactionSequenceNumber\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"X X-fd-column\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"base-fee\",\n        children: \"Base Fee: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"base-fee\",\n        onChange: handleNumberInputChange,\n        value: baseFee\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"X X-fd-column\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"memo\",\n        children: \"Memo: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"memo\",\n        onChange: e => setMemo(e.target.value),\n        value: memo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"X X-fd-column\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"time-bounds\",\n        children: \"Time Bounds: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"time-bounds\",\n        onChange: handleNumberInputChange,\n        value: timeBounds\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TransactionFormComponent, \"Q6sFl31QcgNE1pn43tL5Go4IqtY=\");\n\n_c = TransactionFormComponent;\nexport default TransactionFormComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionFormComponent\");","map":{"version":3,"sources":["C:/Users/acost/Desktop/in-progress/stellar/stellar-wallet/src/Components/BuildTransaction/Transaction/TransactionFormComponent.jsx"],"names":["React","useState","TransactionFormComponent","props","sourceAccount","setSourceAccount","onlyNumsTemp","setOnlyNumsTemp","transactionSequenceNumber","setTransactionSequenceNumber","baseFee","setBaseFee","memo","setMemo","timeBounds","setTimeBounds","replaceSpecialCharacters","input","replace","onlyNumbers","onlyIntegers","Number","isNaN","parseInt","handleNumberInputChange","e","inputName","target","name","inputVariable","value","handleSourceAccountChange","toUpperCase"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst TransactionFormComponent = props => {\r\n    const [sourceAccount,setSourceAccount] = useState('');\r\n    const [onlyNumsTemp,setOnlyNumsTemp] = useState('');\r\n    const [transactionSequenceNumber,setTransactionSequenceNumber] = useState('');\r\n    const [baseFee,setBaseFee] = useState(100);\r\n    const [memo,setMemo] = useState('');\r\n    const [timeBounds,setTimeBounds] = useState(0);\r\n\r\n    // functions to filter inputs\r\n    const replaceSpecialCharacters = input => input.replace(/[~`!@#$%^&*()+={}\\[\\];:\\'\\\"<>.,\\/\\\\\\?_-]/g,''); // replace all special characters\r\n    const onlyNumbers = input => input.replace(/[\\D]/g,''); // replace all non-digits\r\n    const onlyIntegers = input => Number.isNaN(parseInt(input)) ? 0 : parseInt(input); // return integer, or 0 if NaN\r\n\r\n    // handle all number inputs\r\n    const handleNumberInputChange = e => {\r\n        // store element data\r\n        let inputName = e.target.name;\r\n        let inputVariable = onlyNumbers(replaceSpecialCharacters(e.target.value));\r\n        // set appropriate state variables to input value\r\n        if (inputName === \"transaction-sequence-number\") setTransactionSequenceNumber(inputVariable);\r\n        else if (inputName === \"base-fee\") setBaseFee(onlyIntegers(inputVariable));\r\n        else if (inputName === \"time-bounds\") setTimeBounds(onlyIntegers(inputVariable));\r\n    };\r\n\r\n    // handle source account input\r\n    const handleSourceAccountChange = e => setSourceAccount(replaceSpecialCharacters(e.target.value).toUpperCase());\r\n\r\n    return (\r\n        <div>\r\n            <h4>TransactionFormComponent.jsx</h4>\r\n\r\n            {/* Source Account */}\r\n            <div className=\"X X-fd-column\">\r\n                <label htmlFor=\"source-account\">Source Account: </label>\r\n                <input type=\"text\" name=\"source-account\"\r\n                onChange={handleSourceAccountChange} value={sourceAccount}/>\r\n            </div>\r\n\r\n            {/* Transaction Sequence Number */}\r\n            <div className=\"X X-fd-column\">\r\n                <label htmlFor=\"transaction-sequence-number\">Transaction Sequence Number: </label>\r\n                <input type=\"text\" name=\"transaction-sequence-number\"\r\n                onChange={handleNumberInputChange} value={transactionSequenceNumber}/>\r\n            </div>\r\n\r\n            {/* Base Fee */}\r\n            <div className=\"X X-fd-column\">\r\n                <label htmlFor=\"base-fee\">Base Fee: </label>\r\n                <input type=\"text\" name=\"base-fee\"\r\n                onChange={handleNumberInputChange} value={baseFee}/>\r\n            </div>\r\n\r\n            {/* Memo */}\r\n            <div className=\"X X-fd-column\">\r\n                <label htmlFor=\"memo\">Memo: </label>\r\n                <input type=\"text\" name=\"memo\" \r\n                onChange={e=>setMemo(e.target.value)} value={memo}/>\r\n            </div>\r\n\r\n            {/* Time Bounds */}\r\n            <div className=\"X X-fd-column\">\r\n                <label htmlFor=\"time-bounds\">Time Bounds: </label>\r\n                <input type=\"text\" name=\"time-bounds\"\r\n                onChange={handleNumberInputChange} value={timeBounds}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default TransactionFormComponent;"]},"metadata":{},"sourceType":"module"}