{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acost\\\\Desktop\\\\in-progress\\\\stellar\\\\stellar-wallet\\\\src\\\\Components\\\\BuildTransaction\\\\Transaction\\\\TransactionFormComponent.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TransactionFormComponent = props => {\n  _s();\n\n  const [sourceAccount, setSourceAccount] = useState('');\n  const [onlyNumsTemp, setOnlyNumsTemp] = useState('');\n  const [transactionSequenceNumber, setTransactionSequenceNumber] = useState('');\n  const [baseFee, setBaseFee] = useState(100);\n  const [memo, setMemo] = useState('');\n  const [timeBounds, setTimeBounds] = useState(0);\n\n  const replaceSpecialCharacters = input => input.replace(/[~`!@#$%^&*()+={}\\[\\];:\\'\\\"<>.,\\/\\\\\\?_-]/g, '');\n\n  const handleNumberInputChange = e => {\n    // store element data\n    let inputName = e.target.name;\n    let inputVariable = replaceSpecialCharacters(e.target.value); // let inputVariable = parseInt(e.target.value);\n    // only accept numbers\n\n    if (inputVariable.toString().match(/\\d/g)) {\n      setOnlyNumsTemp(inputVariable);\n      if (inputName === \"transaction-sequence-number\") setTransactionSequenceNumber(inputVariable);else if (inputName === \"base-fee\") setBaseFee(inputVariable);else if (inputName === \"time-bounds\") setTimeBounds(inputVariable);\n    } else if (Number.isNaN(inputVariable)) {\n      setOnlyNumsTemp('');\n      if (inputName === \"transaction-sequence-number\") setTransactionSequenceNumber('');else if (inputName === \"base-fee\") setBaseFee('');else if (inputName === \"time-bounds\") setTimeBounds('');\n    } else {\n      if (inputName === \"transaction-sequence-number\") setTransactionSequenceNumber(onlyNumsTemp);else if (inputName === \"base-fee\") setBaseFee(onlyNumsTemp);else if (inputName === \"time-bounds\") setTimeBounds(onlyNumsTemp);\n    }\n  };\n\n  const handleSourceAccountChange = e => {\n    let inputVariable = replaceSpecialCharacters(e.target.value);\n    setSourceAccount(inputVariable.toUpperCase()); // setSourceAccount(inputVariable.replace(/[~`!@#$%^&*()+={}\\[\\];:\\'\\\"<>.,\\/\\\\\\?_-]/g,'').toUpperCase());\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"transaction form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"X X-fd-column\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"source-account\",\n        children: \"Source Account: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"source-account\",\n        onChange: handleSourceAccountChange,\n        value: sourceAccount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"X X-fd-column\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"transaction-sequence-number\",\n        children: \"Transaction Sequence Number: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"transaction-sequence-number\",\n        onChange: handleNumberInputChange,\n        value: transactionSequenceNumber\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"X X-fd-column\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"base-fee\",\n        children: \"Base Fee: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"base-fee\",\n        onChange: handleNumberInputChange,\n        value: baseFee\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"X X-fd-column\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"memo\",\n        children: \"Memo: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"memo\",\n        onChange: e => setMemo(e.target.value),\n        value: memo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"X X-fd-column\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"time-bounds\",\n        children: \"Time Bounds: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"time-bounds\",\n        onChange: handleNumberInputChange,\n        value: timeBounds\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TransactionFormComponent, \"Q6sFl31QcgNE1pn43tL5Go4IqtY=\");\n\n_c = TransactionFormComponent;\nexport default TransactionFormComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionFormComponent\");","map":{"version":3,"sources":["C:/Users/acost/Desktop/in-progress/stellar/stellar-wallet/src/Components/BuildTransaction/Transaction/TransactionFormComponent.jsx"],"names":["React","useState","TransactionFormComponent","props","sourceAccount","setSourceAccount","onlyNumsTemp","setOnlyNumsTemp","transactionSequenceNumber","setTransactionSequenceNumber","baseFee","setBaseFee","memo","setMemo","timeBounds","setTimeBounds","replaceSpecialCharacters","input","replace","handleNumberInputChange","e","inputName","target","name","inputVariable","value","toString","match","Number","isNaN","handleSourceAccountChange","toUpperCase"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst TransactionFormComponent = props => {\r\n    const [sourceAccount,setSourceAccount] = useState('');\r\n    const [onlyNumsTemp,setOnlyNumsTemp] = useState('');\r\n    const [transactionSequenceNumber,setTransactionSequenceNumber] = useState('');\r\n    const [baseFee,setBaseFee] = useState(100);\r\n    const [memo,setMemo] = useState('');\r\n    const [timeBounds,setTimeBounds] = useState(0);\r\n\r\n    const replaceSpecialCharacters = input => input.replace(/[~`!@#$%^&*()+={}\\[\\];:\\'\\\"<>.,\\/\\\\\\?_-]/g,'');\r\n    const handleNumberInputChange = e => {\r\n        // store element data\r\n        let inputName = e.target.name;\r\n        let inputVariable = replaceSpecialCharacters(e.target.value);\r\n        // let inputVariable = parseInt(e.target.value);\r\n\r\n        // only accept numbers\r\n        if (inputVariable.toString().match(/\\d/g)) {\r\n            setOnlyNumsTemp(inputVariable);\r\n            if (inputName === \"transaction-sequence-number\") setTransactionSequenceNumber(inputVariable);\r\n            else if (inputName === \"base-fee\") setBaseFee(inputVariable);\r\n            else if (inputName === \"time-bounds\") setTimeBounds(inputVariable);\r\n        } else if (Number.isNaN(inputVariable)) {\r\n            setOnlyNumsTemp('');\r\n            if (inputName === \"transaction-sequence-number\") setTransactionSequenceNumber('');\r\n            else if (inputName === \"base-fee\") setBaseFee('');\r\n            else if (inputName === \"time-bounds\") setTimeBounds('');\r\n        } else {\r\n            if (inputName === \"transaction-sequence-number\") setTransactionSequenceNumber(onlyNumsTemp);\r\n            else if (inputName === \"base-fee\") setBaseFee(onlyNumsTemp);\r\n            else if (inputName === \"time-bounds\") setTimeBounds(onlyNumsTemp);\r\n        }\r\n    }\r\n    const handleSourceAccountChange = e => {\r\n        let inputVariable = replaceSpecialCharacters(e.target.value);\r\n        setSourceAccount(inputVariable.toUpperCase());\r\n        // setSourceAccount(inputVariable.replace(/[~`!@#$%^&*()+={}\\[\\];:\\'\\\"<>.,\\/\\\\\\?_-]/g,'').toUpperCase());\r\n    }\r\n    return (\r\n        <div>\r\n        <h4>transaction form</h4>\r\n        <div className=\"X X-fd-column\">\r\n            <label htmlFor=\"source-account\">Source Account: </label>\r\n            <input type=\"text\" name=\"source-account\"\r\n            onChange={handleSourceAccountChange} value={sourceAccount}/>\r\n        </div>\r\n        <div className=\"X X-fd-column\">\r\n            <label htmlFor=\"transaction-sequence-number\">Transaction Sequence Number: </label>\r\n            <input type=\"text\" name=\"transaction-sequence-number\"\r\n            onChange={handleNumberInputChange} value={transactionSequenceNumber}/>\r\n        </div>\r\n        <div className=\"X X-fd-column\">\r\n            <label htmlFor=\"base-fee\">Base Fee: </label>\r\n            <input type=\"text\" name=\"base-fee\"\r\n            onChange={handleNumberInputChange} value={baseFee}/>\r\n        </div>\r\n        <div className=\"X X-fd-column\">\r\n            <label htmlFor=\"memo\">Memo: </label>\r\n            <input type=\"text\" name=\"memo\" \r\n            onChange={e=>setMemo(e.target.value)} value={memo}/>\r\n        </div>\r\n        <div className=\"X X-fd-column\">\r\n            <label htmlFor=\"time-bounds\">Time Bounds: </label>\r\n            <input type=\"text\" name=\"time-bounds\"\r\n            onChange={handleNumberInputChange} value={timeBounds}/>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\nexport default TransactionFormComponent;"]},"metadata":{},"sourceType":"module"}