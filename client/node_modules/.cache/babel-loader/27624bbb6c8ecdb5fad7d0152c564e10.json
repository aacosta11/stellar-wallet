{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acost\\\\Desktop\\\\in-progress\\\\stellar\\\\stellar-wallet\\\\src\\\\Components\\\\BuildTransaction\\\\Transaction\\\\TransactionFormComponent.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport FilterInputs from \"../../Shared/FilterInputs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TransactionFormComponent = props => {\n  _s();\n\n  const {\n    replaceSpecialCharacters,\n    onlyNumbers,\n    onlyIntegers\n  } = FilterInputs;\n  const [sourceAccount, setSourceAccount] = useState('');\n  const [transactionSequenceNumber, setTransactionSequenceNumber] = useState('');\n  const [baseFee, setBaseFee] = useState(100);\n  const [memo, setMemo] = useState('');\n  const [timeBounds, setTimeBounds] = useState(0);\n  const [transactionBase, setTransactionBase] = useState(); // handle all number inputs\n\n  const handleNumberInputChange = e => {\n    // store element data\n    let inputName = e.target.name;\n    let inputVariable = onlyNumbers(replaceSpecialCharacters(e.target.value)); // set appropriate state variables to input value\n\n    if (inputName === \"transaction-sequence-number\") setTransactionSequenceNumber(inputVariable);else if (inputName === \"baseFee\") setBaseFee(onlyIntegers(inputVariable));else if (inputName === \"timeBounds\") setTimeBounds(onlyIntegers(inputVariable));\n  }; // handle source account input\n\n\n  const handleSourceAccountChange = e => setSourceAccount(replaceSpecialCharacters(e.target.value).toUpperCase());\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"TransactionFormComponent.jsx\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"X X-fd-column\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"sourceAccount\",\n        children: \"Source Account: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"source-account\",\n        onChange: handleSourceAccountChange,\n        value: sourceAccount,\n        placeholder: \"ex: GDPABHSV5BK3SW3ZWXDW6C4FJM3JD4R4YJ4VDZCJTA5YZXTQKWPIW4B4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"X X-fd-column\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"transaction-sequence-number\",\n        children: \"Transaction Sequence Number: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"transaction-sequence-number\",\n        onChange: handleNumberInputChange,\n        value: transactionSequenceNumber\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"X X-fd-column\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"baseFee\",\n        children: \"Base Fee: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"base-fee\",\n        onChange: handleNumberInputChange,\n        value: baseFee\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"X X-fd-column\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"memo\",\n        children: \"Memo: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"memo\",\n        onChange: e => setMemo(e.target.value),\n        value: memo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"X X-fd-column\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"timeBounds\",\n        children: \"Time Bounds: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"timeBounds\",\n        onChange: handleNumberInputChange,\n        value: timeBounds\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TransactionFormComponent, \"UWc4xc/+WE9SunS5+EmGnpOWbW8=\");\n\n_c = TransactionFormComponent;\nexport default TransactionFormComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionFormComponent\");","map":{"version":3,"sources":["C:/Users/acost/Desktop/in-progress/stellar/stellar-wallet/src/Components/BuildTransaction/Transaction/TransactionFormComponent.jsx"],"names":["React","useState","FilterInputs","TransactionFormComponent","props","replaceSpecialCharacters","onlyNumbers","onlyIntegers","sourceAccount","setSourceAccount","transactionSequenceNumber","setTransactionSequenceNumber","baseFee","setBaseFee","memo","setMemo","timeBounds","setTimeBounds","transactionBase","setTransactionBase","handleNumberInputChange","e","inputName","target","name","inputVariable","value","handleSourceAccountChange","toUpperCase"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,YAAP,MAAyB,2BAAzB;;;AACA,MAAMC,wBAAwB,GAAGC,KAAK,IAAI;AAAA;;AACtC,QAAM;AAAEC,IAAAA,wBAAF;AAA4BC,IAAAA,WAA5B;AAAyCC,IAAAA;AAAzC,MAA0DL,YAAhE;AACA,QAAM,CAACM,aAAD,EAAeC,gBAAf,IAAmCR,QAAQ,CAAC,EAAD,CAAjD;AACA,QAAM,CAACS,yBAAD,EAA2BC,4BAA3B,IAA2DV,QAAQ,CAAC,EAAD,CAAzE;AACA,QAAM,CAACW,OAAD,EAASC,UAAT,IAAuBZ,QAAQ,CAAC,GAAD,CAArC;AACA,QAAM,CAACa,IAAD,EAAMC,OAAN,IAAiBd,QAAQ,CAAC,EAAD,CAA/B;AACA,QAAM,CAACe,UAAD,EAAYC,aAAZ,IAA6BhB,QAAQ,CAAC,CAAD,CAA3C;AAEA,QAAM,CAACiB,eAAD,EAAiBC,kBAAjB,IAAuClB,QAAQ,EAArD,CARsC,CAUtC;;AACA,QAAMmB,uBAAuB,GAAGC,CAAC,IAAI;AACjC;AACA,QAAIC,SAAS,GAAGD,CAAC,CAACE,MAAF,CAASC,IAAzB;AACA,QAAIC,aAAa,GAAGnB,WAAW,CAACD,wBAAwB,CAACgB,CAAC,CAACE,MAAF,CAASG,KAAV,CAAzB,CAA/B,CAHiC,CAIjC;;AACA,QAAIJ,SAAS,KAAK,6BAAlB,EAAiDX,4BAA4B,CAACc,aAAD,CAA5B,CAAjD,KACK,IAAIH,SAAS,KAAK,SAAlB,EAA6BT,UAAU,CAACN,YAAY,CAACkB,aAAD,CAAb,CAAV,CAA7B,KACA,IAAIH,SAAS,KAAK,YAAlB,EAAgCL,aAAa,CAACV,YAAY,CAACkB,aAAD,CAAb,CAAb;AACxC,GARD,CAXsC,CAqBtC;;;AACA,QAAME,yBAAyB,GAAGN,CAAC,IAAIZ,gBAAgB,CAACJ,wBAAwB,CAACgB,CAAC,CAACE,MAAF,CAASG,KAAV,CAAxB,CAAyCE,WAAzC,EAAD,CAAvD;;AAEA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACI;AAAO,QAAA,OAAO,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,gBAAxB;AACA,QAAA,QAAQ,EAAED,yBADV;AACqC,QAAA,KAAK,EAAEnB,aAD5C;AAEA,QAAA,WAAW,EAAC;AAFZ;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,eAaI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACI;AAAO,QAAA,OAAO,EAAC,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,6BAAxB;AACA,QAAA,QAAQ,EAAEY,uBADV;AACmC,QAAA,KAAK,EAAEV;AAD1C;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAbJ,eAoBI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACI;AAAO,QAAA,OAAO,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,UAAxB;AACA,QAAA,QAAQ,EAAEU,uBADV;AACmC,QAAA,KAAK,EAAER;AAD1C;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YApBJ,eA2BI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACI;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,MAAxB;AACA,QAAA,QAAQ,EAAES,CAAC,IAAEN,OAAO,CAACM,CAAC,CAACE,MAAF,CAASG,KAAV,CADpB;AACsC,QAAA,KAAK,EAAEZ;AAD7C;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YA3BJ,eAkCI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACI;AAAO,QAAA,OAAO,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,YAAxB;AACA,QAAA,QAAQ,EAAEM,uBADV;AACmC,QAAA,KAAK,EAAEJ;AAD1C;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAlCJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA2CH,CAnED;;GAAMb,wB;;KAAAA,wB;AAoEN,eAAeA,wBAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport FilterInputs from \"../../Shared/FilterInputs\";\r\nconst TransactionFormComponent = props => {\r\n    const { replaceSpecialCharacters, onlyNumbers, onlyIntegers } = FilterInputs;\r\n    const [sourceAccount,setSourceAccount] = useState('');\r\n    const [transactionSequenceNumber,setTransactionSequenceNumber] = useState('');\r\n    const [baseFee,setBaseFee] = useState(100);\r\n    const [memo,setMemo] = useState('');\r\n    const [timeBounds,setTimeBounds] = useState(0);\r\n\r\n    const [transactionBase,setTransactionBase] = useState()\r\n\r\n    // handle all number inputs\r\n    const handleNumberInputChange = e => {\r\n        // store element data\r\n        let inputName = e.target.name;\r\n        let inputVariable = onlyNumbers(replaceSpecialCharacters(e.target.value));\r\n        // set appropriate state variables to input value\r\n        if (inputName === \"transaction-sequence-number\") setTransactionSequenceNumber(inputVariable);\r\n        else if (inputName === \"baseFee\") setBaseFee(onlyIntegers(inputVariable));\r\n        else if (inputName === \"timeBounds\") setTimeBounds(onlyIntegers(inputVariable));\r\n    };\r\n\r\n    // handle source account input\r\n    const handleSourceAccountChange = e => setSourceAccount(replaceSpecialCharacters(e.target.value).toUpperCase());\r\n\r\n    return (\r\n        <div>\r\n            <h4>TransactionFormComponent.jsx</h4>\r\n\r\n            {/* Source Account */}\r\n            <div className=\"X X-fd-column\">\r\n                <label htmlFor=\"sourceAccount\">Source Account: </label>\r\n                <input type=\"text\" name=\"source-account\"\r\n                onChange={handleSourceAccountChange} value={sourceAccount}\r\n                placeholder=\"ex: GDPABHSV5BK3SW3ZWXDW6C4FJM3JD4R4YJ4VDZCJTA5YZXTQKWPIW4B4\"\r\n                />\r\n            </div>\r\n\r\n            {/* Transaction Sequence Number */}\r\n            <div className=\"X X-fd-column\">\r\n                <label htmlFor=\"transaction-sequence-number\">Transaction Sequence Number: </label>\r\n                <input type=\"text\" name=\"transaction-sequence-number\"\r\n                onChange={handleNumberInputChange} value={transactionSequenceNumber}/>\r\n            </div>\r\n\r\n            {/* Base Fee */}\r\n            <div className=\"X X-fd-column\">\r\n                <label htmlFor=\"baseFee\">Base Fee: </label>\r\n                <input type=\"text\" name=\"base-fee\"\r\n                onChange={handleNumberInputChange} value={baseFee}/>\r\n            </div>\r\n\r\n            {/* Memo */}\r\n            <div className=\"X X-fd-column\">\r\n                <label htmlFor=\"memo\">Memo: </label>\r\n                <input type=\"text\" name=\"memo\" \r\n                onChange={e=>setMemo(e.target.value)} value={memo}/>\r\n            </div>\r\n\r\n            {/* Time Bounds */}\r\n            <div className=\"X X-fd-column\">\r\n                <label htmlFor=\"timeBounds\">Time Bounds: </label>\r\n                <input type=\"text\" name=\"timeBounds\"\r\n                onChange={handleNumberInputChange} value={timeBounds}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default TransactionFormComponent;"]},"metadata":{},"sourceType":"module"}