{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acost\\\\Desktop\\\\code\\\\stellar\\\\stellar-wallet\\\\src\\\\Components\\\\BuildTransaction\\\\Transaction\\\\TransactionFormComponent.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport FilterInputs from \"../../Shared/FilterInputs\";\nimport TransactionContext from \"../../../Context/TransactionContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TransactionFormComponent = props => {\n  _s();\n\n  const {\n    replaceSpecialCharacters,\n    onlyNumbers,\n    onlyIntegers\n  } = FilterInputs;\n  const {\n    transactionBaseInfo,\n    setTransactionBaseInfo\n  } = useContext();\n  const [transactionBase, setTransactionBase] = useState({\n    sourceAccount: '',\n    transactionSequenceNumber: '',\n    baseFee: 100,\n    memo: '',\n    timeBounds: 0\n  }); // handle all number inputs\n\n  const handleNumberInputChange = e => {\n    // store element data\n    let inputName = e.target.name;\n    let inputVariable = onlyNumbers(replaceSpecialCharacters(e.target.value)); // set appropriate state variables to input value\n\n    inputName === \"transactionSequenceNumber\" ? setTransactionBase({ ...transactionBase,\n      [inputName]: [inputVariable]\n    }) : setTransactionBase({ ...transactionBase,\n      [inputName]: [onlyIntegers(inputVariable)]\n    });\n  }; // handle source account input\n\n\n  const handleSourceAccountChange = e => setTransactionBase({ ...transactionBase,\n    sourceAccount: [replaceSpecialCharacters(e.target.value).toUpperCase()]\n  });\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"TransactionFormComponent.jsx\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"X X-fd-column\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"sourceAccount\",\n        children: \"Source Account: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"source-account\",\n        onChange: handleSourceAccountChange,\n        value: transactionBase.sourceAccount,\n        placeholder: \"ex: GDPABHSV5BK3SW3ZWXDW6C4FJM3JD4R4YJ4VDZCJTA5YZXTQKWPIW4B4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"X X-fd-column\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"transactionSequenceNumber\",\n        children: \"Transaction Sequence Number: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"transactionSequenceNumber\",\n        onChange: handleNumberInputChange,\n        value: transactionBase.transactionSequenceNumber\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"X X-fd-column\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"baseFee\",\n        children: \"Base Fee: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"baseFee\",\n        onChange: handleNumberInputChange,\n        value: transactionBase.baseFee\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"X X-fd-column\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"memo\",\n        children: \"Memo: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"memo\",\n        onChange: e => setTransactionBase({ ...transactionBase,\n          memo: [e.target.value]\n        }),\n        value: transactionBase.memo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"X X-fd-column\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"timeBounds\",\n        children: \"Time Bounds: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"timeBounds\",\n        onChange: handleNumberInputChange,\n        value: transactionBase.timeBounds\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), JSON.stringify(transactionBase)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TransactionFormComponent, \"j4xkZGZ3Agly+6y/Mzq60KfMNEc=\");\n\n_c = TransactionFormComponent;\nexport default TransactionFormComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionFormComponent\");","map":{"version":3,"sources":["C:/Users/acost/Desktop/code/stellar/stellar-wallet/src/Components/BuildTransaction/Transaction/TransactionFormComponent.jsx"],"names":["React","useState","FilterInputs","TransactionContext","TransactionFormComponent","props","replaceSpecialCharacters","onlyNumbers","onlyIntegers","transactionBaseInfo","setTransactionBaseInfo","useContext","transactionBase","setTransactionBase","sourceAccount","transactionSequenceNumber","baseFee","memo","timeBounds","handleNumberInputChange","e","inputName","target","name","inputVariable","value","handleSourceAccountChange","toUpperCase","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport FilterInputs from \"../../Shared/FilterInputs\";\r\nimport TransactionContext from \"../../../Context/TransactionContext\";\r\nconst TransactionFormComponent = props => {\r\n    const { replaceSpecialCharacters, onlyNumbers, onlyIntegers } = FilterInputs;\r\n    const { transactionBaseInfo,setTransactionBaseInfo } = useContext()\r\n    const [transactionBase,setTransactionBase] = useState({\r\n        sourceAccount: '',\r\n        transactionSequenceNumber: '',\r\n        baseFee: 100,\r\n        memo: '',\r\n        timeBounds: 0\r\n    })\r\n\r\n    // handle all number inputs\r\n    const handleNumberInputChange = e => {\r\n        // store element data\r\n        let inputName = e.target.name;\r\n        let inputVariable = onlyNumbers(replaceSpecialCharacters(e.target.value));\r\n        // set appropriate state variables to input value\r\n        inputName === \"transactionSequenceNumber\" ? setTransactionBase({...transactionBase,[inputName]:[inputVariable]}) \r\n        : setTransactionBase({...transactionBase,[inputName]:[onlyIntegers(inputVariable)]})\r\n    };\r\n\r\n    // handle source account input\r\n    const handleSourceAccountChange = e => setTransactionBase({\r\n        ...transactionBase,\r\n        sourceAccount:[replaceSpecialCharacters(e.target.value).toUpperCase()]\r\n        });\r\n\r\n    return (\r\n        <div>\r\n            <h4>TransactionFormComponent.jsx</h4>\r\n\r\n            {/* Source Account */}\r\n            <div className=\"X X-fd-column\">\r\n                <label htmlFor=\"sourceAccount\">Source Account: </label>\r\n                <input type=\"text\" name=\"source-account\"\r\n                onChange={handleSourceAccountChange} value={transactionBase.sourceAccount}\r\n                placeholder=\"ex: GDPABHSV5BK3SW3ZWXDW6C4FJM3JD4R4YJ4VDZCJTA5YZXTQKWPIW4B4\"\r\n                />\r\n            </div>\r\n\r\n            {/* Transaction Sequence Number */}\r\n            <div className=\"X X-fd-column\">\r\n                <label htmlFor=\"transactionSequenceNumber\">Transaction Sequence Number: </label>\r\n                <input type=\"text\" name=\"transactionSequenceNumber\"\r\n                onChange={handleNumberInputChange} value={transactionBase.transactionSequenceNumber}/>\r\n            </div>\r\n\r\n            {/* Base Fee */}\r\n            <div className=\"X X-fd-column\">\r\n                <label htmlFor=\"baseFee\">Base Fee: </label>\r\n                <input type=\"text\" name=\"baseFee\"\r\n                onChange={handleNumberInputChange} value={transactionBase.baseFee}/>\r\n            </div>\r\n\r\n            {/* Memo */}\r\n            <div className=\"X X-fd-column\">\r\n                <label htmlFor=\"memo\">Memo: </label>\r\n                <input type=\"text\" name=\"memo\" \r\n                onChange={e=>setTransactionBase({...transactionBase,memo:[e.target.value]})} value={transactionBase.memo}/>\r\n            </div>\r\n\r\n            {/* Time Bounds */}\r\n            <div className=\"X X-fd-column\">\r\n                <label htmlFor=\"timeBounds\">Time Bounds: </label>\r\n                <input type=\"text\" name=\"timeBounds\"\r\n                onChange={handleNumberInputChange} value={transactionBase.timeBounds}/>\r\n            </div>\r\n            {JSON.stringify(transactionBase)}\r\n        </div>\r\n    )\r\n}\r\nexport default TransactionFormComponent;"]},"metadata":{},"sourceType":"module"}